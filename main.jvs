class Board {
    char[][] board;
}

class Player {
    String name;
    char mark;
    /* tableau de positions sous forme [[x,y], [x,y]] */
    int[][] positions;
}

/**
 * Fonction qui créer le plateau de jeu et l'initialise
 *
 * @return tableau à 2 dimensions
 */
Board createBoard() {
    Board board = new Board();
    board.board = new char[11][11];

    for (int i = 0; i < board.board.length; i++) {
        for (int j = 0; j < board.board[i].length; j++) {
            board.board[i][j] = '-';
        }
    }
    return board;
}

/**
 * Procédure permettant de remplir le plateau à la position x, y du joueur player.
 *
 * @param board tableau de char contenant les mouvements des joueurs
 * @param x entier représentant la colonne du tableau
 * @param y entier représentant la ligne du tableau
 * @param player instance du joueur
 */
void fillBoard(char[][] board, int x, int y, Player player) {

    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[i].length; j++) {
            if (i == x && j == y) {
                board[y][x] = player.mark;
            }
        }
    }
}

void drawTopBoard() {
    print("   ");
    for (int i = 0; i < 11; i++) {
        print(i);
        print(" ");
    }
    println("");
}

void drawBottomBoard() {
    print("               _ _ _ _ _ _ _ _ _ _ _ ");
}

/**
 * Procédure permettant l'affichage central du plateau.
 *
 * @param board plateau de char contenant les mouvements des joueurs
 */
void drawMidBoard(char[][] board) {
    for (int i = 0; i < board.length; i++) {

        String space = "";
        for (int k = 0; k < i; k++) {
            space += " ";
        }
        print((i < 10) ? " " + space + i + " " : space + i + " ");

        for (int j = 0; j < board[i].length; j++) {
            print(board[i][j]);
            print(" ");
        }
        println("");
    }
}

/**
 * Procédure qui utilise chacune des 3 fonctions d'affichage du plateau
 *
 * @param board plateau de char contenant les mouvements des joueurs
 */
void drawBoard(char[][] board) {
    drawTopBoard();
    drawMidBoard(board);
}

/* ##################################### Moteur du jeu ##################################### */

boolean interval(int x, int a, int b){
    return x >= a && x < b;
}

/** Fonction permettant de compter le nombre de voisins de la case au rang pos
*
* @param board plateau de char contenant les mouvements des joueurs
* @param p instance du joueur
* @param pos tableau d'entiers de taille 2 représentant la position centrale (x,y)
 */
int nbrVoisins(Board board, Player p, int[] pos) {
    int res = 0;

    for (int y = pos[1] - 1; y <= pos[1] + 1; y++) {
        for (int x = pos[0] - 1; x <= pos[0] + 1; x++) {
            if (!(x == pos[0] - 1 && y == pos[1] - 1 || x == pos[0] + 1 && y == pos[1] + 1 || x == pos[0] && y == pos[1])) {
                if(interval(x, 0, board.board.length) && interval(y, 0, board.board.length)) {
                    if (board.board[x][y] == p.mark) {
                        res++;
                    }
                }
            }
        }
    }
    return res;
}

/** Fonction permettant d'obtenir un tableau à deux dimensions représentant les coordonnées (x, y) des voisins
*
* @param board plateau de char contenant les mouvements des joueurs
* @param p instance du joueur
* @param pos tableau d'entiers de taille 2 représentant la position centrale (x,y)
 */
int[][] checkVoisin(Board board, Player p, int[] pos) {

    int[][] voisins = new int[nbrVoisins(board, p, pos)][2];
    int cursor = 0;

    for (int y = pos[1]; y < pos[1] + 3; y++) {
        for (int x = pos[0]; x < pos[0] + 3; x++) {
            if (x != 0 && y != 0 || x != x - 1 && y != y - 1 || x != x + 1 && y != y + 1) {
                if (board.board[y][x] == p.mark) {
                    int[] coordonees = {x, y};
                    voisins[cursor] = coordonees;
                    cursor++;
                }
            }
        }
    }
    return voisins;
}

void main() {

    Player p = new Player();
    p.mark = 'x';

    int[] pos = {10, 10};
    Board b = createBoard();

    fillBoard(b.board, 0, 1, p);
    fillBoard(b.board, 1, 0, p);
    fillBoard(b.board, 2, 0, p);
    fillBoard(b.board, 1, 1, p);
    fillBoard(b.board, 2, 1, p);
    fillBoard(b.board, 0, 2, p);
    fillBoard(b.board, 1, 2, p);

    drawBoard(b.board);
    println("Nombre de voisins: " + nbrVoisins(b, p, pos));
}
