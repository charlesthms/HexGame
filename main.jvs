class Board {
    char[][] board;
}

class Player {
    String name;
    char mark;
    /* tableau de positions sous forme [[x,y], [x,y]] */
    int[][] positions;
}

/**
 * Fonction qui créer le plateau de jeu et l'initialise
 *
 * @return tableau à 2 dimensions
 */
Board createBoard() {
    Board board = new Board();
    board.board = new char[11][11];

    for (int i = 0; i < board.board.length; i++) {
        for (int j = 0; j < board.board[i].length; j++) {
            board.board[i][j] = '-';
        }
    }
    return board;
}

/**
 * Procédure permettant de remplir le plateau à la position x, y du joueur player.
 *
 * @param board tableau de char contenant les mouvements des joueurs
 * @param x entier représentant la colonne du tableau
 * @param y entier représentant la ligne du tableau
 * @param player instance du joueur
 */
void fillBoard(char[][] board, int x, int y, Player player) {

    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[i].length; j++) {
            if (i == x && j == y) {
                board[y][x] = player.mark;
            }
        }
    }
}

void drawTopBoard() {
    print("   ");
    for (int i = 0; i < 11; i++) {
        print(i);
        print(" ");
    }
    println("");
}

void drawBottomBoard() {
    print("               _ _ _ _ _ _ _ _ _ _ _ ");
}

/**
 * Procédure permettant l'affichage central du plateau.
 *
 * @param board plateau de char contenant les mouvements des joueurs
 */
void drawMidBoard(char[][] board) {
    for (int i = 0; i < board.length; i++) {

        String space = "";
        for (int k = 0; k < i; k++) {
            space += " ";
        }
        print((i < 10) ? " " + space + i + " " : space + i + " ");

        for (int j = 0; j < board[i].length; j++) {
            print(board[i][j]);
            print(" ");
        }
        println("");
    }
}

/**
 * Procédure qui utilise chacune des 3 fonctions d'affichage du plateau
 *
 * @param board plateau de char contenant les mouvements des joueurs
 */
void drawBoard(char[][] board) {
    drawTopBoard();
    drawMidBoard(board);
}

/* ##################################### Moteur du jeu ##################################### */

boolean interval(int x, int a, int b) {
    return x >= a && x < b;
}

/**
 * Fonction permettant de compter le nombre de voisins de la case au rang pos
 *
 * @param board plateau de char contenant les mouvements des joueurs
 * @param p instance du joueur
 * @param pos tableau d'entiers de taille 2 représentant la position centrale (x,y)
 * @return le nombre de voisins
 */
int nbrVoisins(Board board, Player p, int[] pos) {
    int res = 0;

    for (int y = pos[1] - 1; y <= pos[1] + 1; y++) {
        for (int x = pos[0] - 1; x <= pos[0] + 1; x++) {
            if (!(x == pos[0] - 1 && y == pos[1] - 1
                    || x == pos[0] + 1 && y == pos[1] + 1
                    || x == pos[0] && y == pos[1])) {
                if (interval(x, 0, board.board.length) && interval(y, 0, board.board.length)) {
                    if (board.board[y][x] == p.mark) {
                        res++;
                    }
                }
            }
        }
    }
    return res;
}

/**
 * Fonction permettant d'obtenir un tableau à deux dimensions représentant les coordonnées (x,
 * y) des voisins
 *
 * @param board plateau de char contenant les mouvements des joueurs
 * @param p instance du joueur
 * @param pos tableau d'entiers de taille 2 représentant la position centrale (x,y)
 * @return tableau d'entiers à 2 dimensions.
 */
int[][] checkVoisin(Board board, Player p, int[] pos) {

    int[][] voisins = new int[nbrVoisins(board, p, pos)][2];
    int cursor = 0;

    for (int y = pos[1] - 1; y <= pos[1] + 1; y++) {
        for (int x = pos[0] - 1; x <= pos[0] + 1; x++) {
            if (!(x == pos[0] - 1 && y == pos[1] - 1
                    || x == pos[0] + 1 && y == pos[1] + 1
                    || x == pos[0] && y == pos[1])) {
                if (interval(x, 0, board.board.length) && interval(y, 0, board.board.length)) {
                    if (board.board[y][x] == p.mark) {
                        int[] coordonees = {x, y};
                        voisins[cursor] = coordonees;
                        cursor++;
                    }
                }
            }
        }
    }
    return voisins;
}

/**
 * Fonction qui vérifie si un joueur forme une ligne continue à travers le plateau
 *
 * @param board plateau de jeu
 * @param p instance du joueur
 * @param visited tableau booléen permettant de marquer les cases déjà visitées
 * @param start position initiale
 */
boolean isConnected(Board board, Player p, Boolean[][] visited, int[] start) {
    // On marque comme visitée l aposition actuelle
    visited[start[0]][start[1]] = true;

    if ((p.mark == 'y') ? start[1] == 10 : start[0] == 10) {
        // Condition d'arrêt
        return true;
    } else {
        int[][] voisins = checkVoisin(board, p, start);

        if (voisins.length > 2) {
            // S'il y a un 'noeud'
            boolean[] tab = new boolean[voisins.length];
            for (int i = 0; i < tab.length; i++) {
                if (visited[voisins[i][0]][voisins[i][1]] != true) {
                    tab[i] = isConnected(board, p, visited, voisins[i]);
                    if (tab[i]) return true;
                }
            }
        } else {
            for (int y = 0; y < voisins.length; y++) {
                if (visited[voisins[y][0]][voisins[y][1]] != true) {
                    // Si la case ne l'est pas déjà on la marque cette comme 'visitée'
                    // println(voisins[y][0] + ", " + voisins[y][1]);
                    visited[voisins[y][0]][voisins[y][1]] = true;
                    return isConnected(board, p, visited, voisins[y]);
                }
            }
        }
        return false;
    }
}

void main() {

    Player p = new Player();
    p.mark = 'x';
    Player p1 = new Player();
    p1.mark = 'y';

    int[] pos = {2, 0};
    Board b = createBoard();

    fillBoard(b.board, 2, 0, p1);
    fillBoard(b.board, 2, 1, p1);
    fillBoard(b.board, 2, 2, p1);
    fillBoard(b.board, 3, 2, p1);
    fillBoard(b.board, 3, 3, p1);
    fillBoard(b.board, 3, 4, p1);
    fillBoard(b.board, 3, 5, p1);
    fillBoard(b.board, 3, 6, p1);
    fillBoard(b.board, 3, 7, p1);
    fillBoard(b.board, 4, 7, p1);
    fillBoard(b.board, 5, 7, p1);
    fillBoard(b.board, 3, 8, p1);
    fillBoard(b.board, 3, 9, p1);
    fillBoard(b.board, 4, 9, p1);
    fillBoard(b.board, 6, 8, p1);
    fillBoard(b.board, 5, 8, p1);
    fillBoard(b.board, 4, 9, p1);
    fillBoard(b.board, 6, 9, p1);
    fillBoard(b.board, 2, 7, p1);
    fillBoard(b.board, 1, 8, p1);
    fillBoard(b.board, 1, 9, p1);
    // fillBoard(b.board, 6, 10, p1);
    fillBoard(b.board, 0, 10, p1);

    drawBoard(b.board);

    Boolean[][] visited = new Boolean[11][11];
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 11; j++) {
            visited[i][j] = false;
        }
    }

    println(isConnected(b, p1, visited, pos));
}
